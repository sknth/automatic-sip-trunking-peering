    module ietf-sip-auto-peering {
      namespace "urn:ietf:params:xml:ns:ietf-sip-auto-peering";
      prefix "peering";

      description
      "Data model for transmitting peering parameters from SP to Enterprise";

      revision 2019-05-06 {
        description "Initial revision of peering-response doc.";
      }
            
      import ietf-inet-types {
        prefix "inet";
      }
  
      typedef ipv4-address-port {
        type string {
          pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}'
          +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
          + ':^()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$';
        }
        description "The ipv4-address-port type represents an IPv4 address in
        dotted-quad notation followed by a port number.";
      }
  
      typedef ipv6-address-port {
        type string {
          pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
          + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
          + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}'
          + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
          + ':^()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$';
          pattern 
          '(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|'
          + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
          + ':^()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$';
        }
          description 
          "The ipv6-address type represents an IPv6 address in full,
          mixed, shortened, and shortened-mixed notation followed by a port number.";
      }
  
      typedef ip-address-port {
        type union {
          type ipv4-address-port;
          type ipv6-address-port;
        }
        description 
        "The ip-address-port type represents an IP address:port number
        and is IP version neutral.";
      }
  
      typedef domain-name-port {
        type string {
          pattern
          '((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*'
          + '([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)'
          + '|\.'
          + ':^()([1-9]|[1-5]?[0-9]{2,4}|6[1-4][0-9]{3}|65[1-4][0-9]{2}|655[1-2][0-9]|6553[1-5])$';
          length "1..258";
        }
        description
        "The domain-name-port type represents a DNS domain name followed by a port number.
        The name SHOULD be fully qualified whenever possible.";
      }
  
      typedef host-port {
        type union {
          type ip-address-port;
          type domain-name-port;
        }
        description
        "The host type represents either an IP address or a DNS
        domain name followed by a port number.";
      }
  
      container peering-info {
        leaf variant {
          type string;
          mandatory true;
          description "Variant of peering-response document";
        }
            
        container transport-info {
          leaf transport {
            type enumeration {
              enum "TCP";
              enum "TLS";
              enum "UDP";
              enum "TCP;TLS";
              enum "TCP;TLS;UDP";
              enum "TCP;UDP";
            }
            description "Transport Protocol(s) used in SIP communication";
          }
            
          leaf-list registrar {
            type host-port;
            max-elements 3;
            description "List of service provider registrar servers";
          }
            
          leaf registrarRealm {
            type string;
            description "Realm for REGISTER requests carrying credentials";
          }
            
          leaf-list callControl {
            type host-port;
            max-elements 3;
            description "List of service provider call control servers";
          }
            
          leaf-list dns {
            type inet:ip-address;
            max-elements 2;
            description "IP address of the DNS Server(s) hosted by the service provider";
          }
            
          leaf outboundProxy {
            type host-port;
            description "SIP Outbound Proxy";
          }                             
        }
    
        container call-specs {
          leaf earlyMedia {
            type boolean;
            description "Flag indicating whether the service provider is expected
            to deliver early media.";
          }

          leaf signalingForking {
            type boolean;
            description "Flag indicating whether the service provider is capable
            of forking incoming calls ";
          }
            
          leaf supportedMethods {
            type string;
            description "Leaf/Leaf List indicating the different SIP methods
            support by the service provider.";
          }
        }
    
        container media {
          container mediaTypeAudio {
            leaf-list mediaFormat {
              type string;
              description "Leaf List indicating the audio media formats supported.";
            }
          }
                 
          container fax {
            leaf-list protocol {
              type enumeration {
                enum "pass-through";
                enum "t38";
              }
              max-elements 2;
              description "Leaf List indicating the different fax protocols
              supported by the service provider.";
            }
          }
      
          container rtp {
            leaf RTPTrigger {
              type boolean;
              description "Flag indicating whether the service provider expects to 
              receive the first media packet.";
            }
            
            leaf symmetricRTP {
              type boolean;
              description "Flag indicating whether the service provider expects 
              symmetric RTP defined in [@RFC4961]";
            }
          }
    
          container rtcp {
            leaf symmetricRTCP {
              type boolean;
              description " Flag indicating whether the service provider expects 
              symmetric RTP defined in [@RFC4961].";
            }
            
            leaf RTCPfeedback {
              type boolean;
              description "Flag Indicating support for RTP profile extension for 
              RTCP-based feedback, as defined in [@RFC4585]";
            }
          }
        }

        container dtmf {
          leaf payloadNumber {
            type int8 {
              range "96..127";
            }
            description "Leaf that indicates the payload number(s) supported by 
            the service provider for DTMF relay via Named-Telephony-Events";
          }

          leaf iteration {
            type boolean;
            description "Flag identifying whether the service provider supports 
            NTE DTMF relay using the procedures of [@RFC2833] or [@RFC4733] .";
          }
        }
    
        container security {
          container signaling {
            leaf type {
              type string {
                pattern "TLS";
              }
              description "Type of signaling security supported.";
            }
            
            leaf version {
              type string {
                pattern "([1-9]\.[0-9])(;[1-9]\.[0-9])?|(NULL)";
              }
              description "Indicates TLS version for SIP signaling";
            }
          }   
    
          container mediaSecurity {
            leaf keyManagement {
              type string {
                pattern "(SDES(;DTLS-SRTP,version=[1-9]\.[0-9](,[1-9]\.[0-9])?)?)|(DTLS-SRTP,version=[1-9]\.[0-9](,[1-9]\.[0-9])?)|(NULL)";
              }
              description "Leaf that identifies the key management methods 
              supported by the service provider for SRTP.";
            }
          }
        }
    
        leaf extensions {
          type string;
          description "Lists the various SIP extensions supported by SP";
        }
      }
    }
