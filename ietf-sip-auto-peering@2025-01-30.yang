module ietf-sip-auto-peering {
  namespace "urn:ietf:params:xml:ns:yang:ietf-sip-auto-peering";
  prefix "peering";

  import ietf-inet-types {
    prefix "inet";
  }

  import iana-crypt-hash {
    prefix "ianach";
  }

  organization
    "IETF ASAP (Automatic SIP trunking And Peering) Working Group";

  contact
    "WG Web: <https://datatracker.ietf.org/wg/asap/>
    WG List: <mailto:asap@ietf.org>

    Editor: Kaustubh Inamdar
    <mailto:kaustubh.ietf@gmail.com>

    Editor: Sreekanth Narayanan
    <mailto:sreenara@cisco.com>

    Editor: Cullen Jennings
    <mailto:fluffy@iii.ca>";

  description
    "Data model for encoding SIP Service Provider Capability Set

    Copyright (c) 2025 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC XXXX
    (https://www.rfc-editor.org/info/rfcXXXX); see
    the RFC itself for full legal notices.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
      described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.";

  revision 2025-01-30 {
    description "Initial version";
    reference
      "RFC XXXX: Automatic Peering for SIP Trunks";
  }

  grouping entity {
    description
      "Grouping that provides a reusable list named 'entity', "
      + "with each entry containing a host and a port.";

      leaf host {
        type union {
          type inet:ip-address;
          type inet:domain-name; 
        }
        description
          "IP Address or host name of the entity";
      }

      leaf port {
        type inet:port-number;
        default "5060";
        description
          "Entity's port number (e.g. 5060).";
      }
  }

  list peering-info {
    key index;
    max-elements 1;
    description "The root of all capabilities in the documents.";

    leaf index {
      type uint16;
      description "Index for the peering-info set.";
    }

    leaf variant {
      type string;
      mandatory true;
      description "Variant of peering-response document.";
    }

    container revision {
      description "The version number of the capability set
      document.";

      leaf not-before {
        type string;
        mandatory true;
        description "Time and date specifying when the parameters
        specified in this capability set document are considered
        active or valid.";
      }

      leaf location {
        type string;
        mandatory true;
        description "Location of the new version of capability set
        document.";
      }
    }

    container transport-info {
      description "The transport characteristics of SIP sessions
      between enterprise and service provider networks.";

      leaf-list transport {
        type enumeration {
          enum tcp {
            description "Transmission Control Protocol";
          }
          enum tls {
            description "Transport Layer Security (over TCP)";
          }
          enum udp {
            description "User Datagram Protocol";
          }
        }
        mandatory true;
        description "List of transport protocols.";
      }

      leaf-list registrar {
        uses entity;
        max-elements 3;
        description "List of service provider registrar servers.";
      }

      list realms {
        key "name";
        description "The set of realms or protection domains the SIP
        service provider is responsible for.";

        leaf name {
          type string;
          mandatory true;
          description "Name of the realm or protection domain in the
          service provider network.";
        }

        leaf username {
          type string;
          description "Username for digest authentication within
          the realm specified in the preceding leaf.";
        }

        leaf password {
          type ianach:crypt-hash;
          description "Password for digest authentication within
          the realm specified in the preceding leaf stored as a
          cryptographic hash.";
        }
      }

      leaf-list call-control {
        uses entity;
        max-elements 3;
        description "List of service provider call control servers.";
      }

      leaf-list dns {
        type inet:ip-address;
        max-elements 2;
        description "IP address of the DNS Server(s) hosted by the
        service provider.";
      }

      leaf outbound-proxy {
        uses entity;
        description "SIP Outbound Proxy.";
      }
    }

    container call-specs {
      description "Information about call specifications,
      restrictions and additional handling criteria for SIP calls
      between the enterprise and service provider network.";

      leaf early-media {
        type boolean;
        description "Flag indicating whether the service provider is
        expected to deliver early media.";
      }

      leaf signaling-forking {
        type boolean;
        description "Flag indicating if the service provider may
        fork calls made from the enterprise network.";
      }

      leaf-list supported-methods {
        type enumeration {
          enum INVITE {
            description "Initiate a dialog or session.";
          }
          enum ACK {
            description "Acknowledge final response to INVITE.";
          }
          enum BYE {
            description "Terminate a dialog or session.";
          }
          enum CANCEL {
            description "Cancel a pending request.";
          }
          enum REGISTER {
            description "Register contact information.";
          }
          enum OPTIONS {
            description "Query capabilities of a server.";
          }
          enum PRACK {
            description "Provisional acknowledgement.";
          }
          enum SUBSCRIBE {
            description "Subscribe to an event.";
          }
          enum NOTIFY {
            description "Notify subscriber of an event.";
          }
          enum PUBLISH {
            description "Publish an event state.";
          }
          enum INFO {
            description "Send mid-session information.";
          }
          enum REFER {
            description "Refer recipient to a third party.";
          }
          enum MESSAGE {
            description "Instant message transport.";
          }
          enum UPDATE {
            description "Update session parameters within a dialog.";
          }
        }
        description
          "A list of SIP methods supported by this endpoint. "
          + "Examples: 'INVITE', 'SUBSCRIBE', 'NOTIFY', etc.";
      }

      container caller-id {
        description "Preferences of SIP Service Providers in terms
        of calling number presentation by the enterprise network.";

        leaf e164-format {
          type boolean;
          description "Flag indicating whether the enterprise must
          format calling numbers in E.164 format.";
        }

        leaf preferred-method {
          type enumeration {
            enum P-Asserted-Identity {
              description "Use the 'P-Asserted-Identity' header to determine
              remote party identity.";
            }
            enum From {
              description "Use the 'From' header to determine remote party
              identity.";
            }
            enum Remote-Party-ID {
              description "Use the 'Remote-Party-ID' header to determine
              remote party identity.";
            }
          }
          description "Field specifying which SIP header must be
          used by the enterprise network to communicate caller
          information.";
        }
      }

      list num-ranges {
        key index;
        description "Direct Inward Dial (DID) number range allocated
        to the enterprise network by the SIP service provider.";

        leaf index {
          type uint16;
          description "Index for the ranges.";
        }

        leaf type {
          type string;
          description "String indicating whether the number range
          allocated to the enterprise network is passed by value or
          by reference.";
        }

        leaf count {
          when "../type = 'range' or ../type = 'collection'";
          type uint16;
          description "The count of the individual numbers present
          in the number range.";
        }

        leaf-list value {
          type string;
          description "Value of the individual number in the number
          range or URL being passed as reference.";
        }
      }
    }

    container media {
      description "The characteristics of UDP-based audio streams.";

      container media-type-audio {
        description "The various audio media formats supported by
        the SIP service provider.";

        leaf-list media-format {
          type string;
          description "Leaf List indicating the audio media formats
          supported by the service provider.";
        }
      }

      container fax {
        description "The fax protocol(s) supported by the SIP
        service provider.";

        leaf-list protocol {
          type enumeration {
            enum "pass-through" {
              description "Protocol-based fax passthrough.";
            }

            enum "t38" {
              description "T38 relay.";
            }
          }
          max-elements 2;
          description "Leaf List indicating the different fax
          protocols supported by the service provider.";
        }
      }

      container rtp {
        description "Generic characteristics of RTP sessions between
        the enterprise and service provider network.";

        leaf rtp-trigger {
          type boolean;
          description "Flag indicating whether the service provider
          expects to receive the first media packet from the
          enterprise network in a connected SIP session.";
        }

        leaf symmetric-rtp {
          type boolean;
          description "Flag indicating whether the service provider
          expects symmetric RTP defined in [@RFC4961].";
        }
      }

      container rtcp {
        description "Generic characteristics of RTCP sessions
        between the enterprise and service provider network.";

        leaf symmetric-rtcp {
          type boolean;
          description "Flag indicating whether the service provider
          expects symmetric RTP defined in [@RFC4961].";
        }

        leaf rtcp-feedback {
          type boolean;
          description "Flag Indicating support for RTP profile
          extension for RTCP-based feedback, as defined in
          [@RFC4585].";
        }
      }
    }

    container dtmf {
      description "The various aspects of DTMF relay via RTP Named
      Telephony Events.";

      leaf payload-number {
        type uint8 {
          range "96..127";
        }
        description "Leaf indicating the payload number(s) supported
        by the service provider for DTMF related via RTP NTE.";
      }

      leaf iteration {
        type boolean;
        description "Flag identifying whether the service provider
        supports RTP-NTE DTMF relay using the procedures of
        [@RFC2833] or [@RFC4733].";
      }
    }

    container security {
      description "The characteristics about encrypting signalling
      streams between the enterprise and SIP service provider
      networks.";

      container signaling {
        description "The type of security protocol for the SIP
        communication between the enterprise SBC and the service
        provider.";

        leaf secure {
          type boolean;
          description "Flag indicating whether the service provider
          supports SIP over TLS.";
        }

        leaf version {
          type string {
            pattern "([1-9]\\.[0-9])(;[1-9]\\.[0-9])?|(NULL)";
          }
          description "Leaf indicating the TLS version supported by
          the SIP service provider.";
        }
      }

      container media-security {
        description "The various characteristics of securing media
        streams between enterprise and service provider networks.";

        leaf key-management {
          type string {
            pattern "(SDES(;DTLS-SRTP,version=[1-9]\\.[0-9](,[1-9]"
            + "\\.[0-9])?)?)|(DTLS-SRTP,version=[1-9]\\.[0-9](,"
            + "[1-9]\\.[0-9])?)|(NULL)";
          }
          description "Leaf indicating the key management methods
          supported by the service provider for SRTP.";
        }
      }

      leaf cert-location {
        type string;
        description "Location of the service provider certificate
        chain for SIP over TLS.";
      }

      container secure-telephony-identity {
        description "The Secure Telephony Identity Revisited (STIR)
        characteristics.";

        leaf stir-compliance {
          type boolean;
          description "Indicates whether the SIP service provider is
          STIR compliant.";
        }

        leaf cert-delegation {
          type boolean;
          description "Indicates whether a SIP service provider is
          willing to delegate authority to the enterprise network
          over its allocated number range(s).";
        }

        leaf acme-directory {
          when "../cert-delegation = 'true'";
          type string;
          description "Directory object URL, when de-referenced,
          provides a collection of field name-value pairs to
          kickstart ACME.";
        }
      }
    }

    leaf-list extensions {
      type string;
      description "Lists the various SIP extensions supported by the
      service provider.";
    }
  }
}
